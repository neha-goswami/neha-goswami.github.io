{"version":3,"sources":["RepCounter.js","global-styles.js","App.js","serviceWorker.js","index.js"],"names":["RepCounter","react_default","a","createElement","className","style","textAlign","marginTop","fontSize","this","props","repCount","weight","Component","GlobalStyle","createGlobalStyle","_templateObject","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","response","endpoint","username","tracking","_this2","socket","socketIOClient","on","data","setState","num","_this3","_this$state","Helmet","name","content","es","mode","padding","backgroundColor","role","aria-label","marginRight","size","src_RepCounter","type","placeholder","onChange","newname","disabled","value","class","onClick","global_styles","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ecc95dc.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport ReactSpeedometer from \"react-d3-speedometer\"\n\nclass RepCounter extends Component {\n    \n  render() {\n    return (\n      <div className=\"rep-counter\" style={{textAlign: \"center\",\n                                           marginTop: \"80px\"}}>\n\n        <div style={{textAlign: \"center\",\n                     fontSize: \"100px\"}}>\n          {this.props.repCount}\n        </div>\n        <div style={{textAlign: \"center\",\n                     fontSize: \"20px\"}}>\n                     reps\n        </div>\n\n        <div style={{textAlign: \"center\",\n                     marginTop: \"60px\",\n                     fontSize: \"100px\"}}>\n          {this.props.weight}\n        </div>\n        <div style={{textAlign: \"center\",\n                     fontSize: \"20px\"}}>\n                     pounds\n        </div>\n                    \n      </div>\n    );\n  }\n}\n\nexport default RepCounter;","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    height: 100%;\n    width: 100%;\n  }\n\n  body {\n    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  }\n\n  body.fontLoaded {\n    font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  }\n\n  #app {\n    background-color: #fafafa;\n    min-height: 100%;\n    min-width: 100%;\n  }\n\n  p,\n  label {\n    font-family: Georgia, Times, 'Times New Roman', serif;\n    line-height: 1.5em;\n  }\n`;\n\nexport default GlobalStyle;","import React, {Component} from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { Helmet } from 'react-helmet';\nimport { Button, NavBar, WingBlank, WhiteSpace, InputItem, List } from 'antd-mobile';\n\nimport RepCounter from './RepCounter';\nimport './style.css';\nimport GlobalStyle from './global-styles';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            response: 10,\n            weight: 0,\n            endpoint: \"18.216.79.215:4001\",\n            username: \"\",\n            tracking: false\n        };\n    }\n\n    componentDidMount() {\n        const {endpoint} = this.state;\n        //Very simply connect to the socket\n        const socket = socketIOClient(endpoint);\n        //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n        socket.on(\"outgoing rep\", data => this.setState({response: data.num}));\n        socket.on(\"outgoing weight\", data => this.setState({weight: data.num}));\n    }\n\n    render() {\n        const {response, username, tracking} = this.state;\n        return (\n            <div >\n                <div>\n                    <Helmet>\n                        <title>Rep Counter</title>\n                        <meta name=\"description\" content=\"A Balans AI application rep counter\" />\n                    </Helmet>\n                    <div>\n                    <NavBar mode=\"dark\" style={{ padding: '10px 0px' , \n                                                 textAlign: \"center\" ,\n                                                 backgroundColor: '#03a1fc'}}>\n                        <h1>\n                            <span\n                            role=\"img\"\n                            aria-label=\"Weight Lifter\"\n                            style={{ marginRight: '10px' }}>üèãÔ∏è</span>‚ÄçBalans\n                        </h1>\n                    </NavBar>\n                    <WhiteSpace size=\"lg\" />\n                    <WingBlank>\n                        {(!username & !tracking)? (\n                            <div className=\"informational\">\n                                Please enter your name to get started\n                                <br />\n                            </div>\n                        ) : (!tracking) ? (\n                            <div className=\"success\">\n                                <div>Nice to meet you, {username}.</div>\n                                <div>Click to start tracking\n                                    <span role=\"img\" aria-label=\"Weight Lifter\">  üí™</span>\n                                </div>\n                            </div>\n                        ) : (<div></div>)}\n                    \n                    </WingBlank>\n                    </div>\n                <div>\n                    {tracking?  \n                    (<RepCounter repCount={this.state.response} weight={this.state.weight} />)\n                    : (<div><InputItem\n                        type=\"text\"\n                        placeholder=\"Input your name\"\n                        style={{ fontSize: '22px',\n                                 textAlign: 'center'}}\n                        onChange={newname => this.setState({username: newname})}\n                        disabled={tracking}\n                        value={username}\n                    >Name</InputItem>\n                    <div class=\"clearfix\"></div>\n                    <WhiteSpace size=\"lg\" />\n                    <div>\n                        <Button type=\"primary\" onClick={() => this.setState({tracking: true})}>\n                            Track bench press\n                        </Button>\n                        <WhiteSpace />\n                    </div></div>) }\n                </div>\n            </div>\n            <GlobalStyle />\n        </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}